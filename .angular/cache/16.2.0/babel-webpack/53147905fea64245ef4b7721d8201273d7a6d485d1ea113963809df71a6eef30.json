{"ast":null,"code":"var _class;\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HousingService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAllPropperties(SellRent) {\n    return this.http.get('data/properties.json').pipe(map(data => {\n      const propArray = [];\n      for (const index in data) {\n        if (data.hasOwnProperty(index) && data[index].SellRent === SellRent) {\n          propArray.push(data[index]);\n        }\n      }\n      return propArray;\n    }));\n    // return this.http.get<IProperty[]>('data/properties.json').pipe(\n    //   map(data => {\n    //     return Object.values(data).filter(property => property.SellRent === SellRent);\n    //   })\n    // );\n  }\n\n  addProperty(property) {\n    let newProp = [property];\n    // Add new property in array if newProp alreay exists in local storage\n    if (localStorage.getItem('newProp')) {\n      newProp = [property, ...JSON.parse(localStorage.getItem('newProp'))];\n    }\n    localStorage.setItem('newProp', JSON.stringify(newProp));\n  }\n  newPropID() {\n    if (localStorage.getItem('PID')) {\n      localStorage.setItem('PID', String(+!localStorage.getItem('PID') + 1));\n      return +!localStorage.getItem('PID');\n    } else {\n      localStorage.setItem('PID', '101');\n      return 101;\n    }\n  }\n}\n_class = HousingService;\n_class.ɵfac = function HousingService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","HousingService","constructor","http","getAllPropperties","SellRent","get","pipe","data","propArray","index","hasOwnProperty","push","addProperty","property","newProp","localStorage","getItem","JSON","parse","setItem","stringify","newPropID","String","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\code\\Angular\\my_app\\frontend\\src\\app\\services\\housing.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { IProperty } from '../Interface/IProperty.interface';\nimport { Property } from '../Interface/Property';\nimport { Observable } from 'rxjs';\nimport { IPropertyBase } from '../Interface/IPropertybase';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HousingService {\n\n  constructor(private http: HttpClient) { }\n \n  getAllPropperties(SellRent: number): Observable<IPropertyBase[]> {\n    return this.http.get<IProperty[]>('data/properties.json').pipe(\n      map(data => {\n        const propArray: Array<IProperty> = [];\n        for (const index in data ) {\n          if (data.hasOwnProperty(index) &&  data[index].SellRent === SellRent) {\n            propArray.push(data[index]);\n          }\n        }\n        return propArray;\n      })\n    );\n\n    // return this.http.get<IProperty[]>('data/properties.json').pipe(\n    //   map(data => {\n    //     return Object.values(data).filter(property => property.SellRent === SellRent);\n    //   })\n    // );\n  }\n  addProperty(property: Property) {\n    let newProp = [property];\n\n    // Add new property in array if newProp alreay exists in local storage\n    if (localStorage.getItem('newProp')) {\n      newProp = [property,\n                  ...JSON.parse(localStorage.getItem('newProp')!)];\n    }\n\n    localStorage.setItem('newProp', JSON.stringify(newProp));\n  }\n\n\n  \n  newPropID() {\n    if (localStorage.getItem('PID')) {\n      localStorage.setItem('PID', String(+!localStorage.getItem('PID') + 1));\n      return +!localStorage.getItem('PID');\n    } else {\n      localStorage.setItem('PID', '101');\n      return 101;\n    }\n  }\n}\n"],"mappings":";AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AASpC,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,iBAAiBA,CAACC,QAAgB;IAChC,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAc,sBAAsB,CAAC,CAACC,IAAI,CAC5DP,GAAG,CAACQ,IAAI,IAAG;MACT,MAAMC,SAAS,GAAqB,EAAE;MACtC,KAAK,MAAMC,KAAK,IAAIF,IAAI,EAAG;QACzB,IAAIA,IAAI,CAACG,cAAc,CAACD,KAAK,CAAC,IAAKF,IAAI,CAACE,KAAK,CAAC,CAACL,QAAQ,KAAKA,QAAQ,EAAE;UACpEI,SAAS,CAACG,IAAI,CAACJ,IAAI,CAACE,KAAK,CAAC,CAAC;;;MAG/B,OAAOD,SAAS;IAClB,CAAC,CAAC,CACH;IAED;IACA;IACA;IACA;IACA;EACF;;EACAI,WAAWA,CAACC,QAAkB;IAC5B,IAAIC,OAAO,GAAG,CAACD,QAAQ,CAAC;IAExB;IACA,IAAIE,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,EAAE;MACnCF,OAAO,GAAG,CAACD,QAAQ,EACP,GAAGI,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,SAAS,CAAE,CAAC,CAAC;;IAG9DD,YAAY,CAACI,OAAO,CAAC,SAAS,EAAEF,IAAI,CAACG,SAAS,CAACN,OAAO,CAAC,CAAC;EAC1D;EAIAO,SAASA,CAAA;IACP,IAAIN,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE;MAC/BD,YAAY,CAACI,OAAO,CAAC,KAAK,EAAEG,MAAM,CAAC,CAAC,CAACP,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;MACtE,OAAO,CAAC,CAACD,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;KACrC,MAAM;MACLD,YAAY,CAACI,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;MAClC,OAAO,GAAG;;EAEd;;SA7CWnB,cAAc;;mBAAdA,MAAc,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAd1B,MAAc;EAAA2B,OAAA,EAAd3B,MAAc,CAAA4B,IAAA;EAAAC,UAAA,EAFb;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}